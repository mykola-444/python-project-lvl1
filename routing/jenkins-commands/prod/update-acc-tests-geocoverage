set -xe
. map-integration-testing/ci/routing/common_functions.sh
source_docker_cfg map-integration-testing/ci/routing/docker_acc.cfg
DOCKER_IMAGE=$MITF_IMAGE

function verify_env_vars {
    set_env_var_if_not_set AWS_DEFAULT_REGION us-east-1
    set_env_var_if_not_set BUCKET mitf-artifacts
}
verify_env_vars

if [[ -z ${TOPIC} ]] && [[ ! -z ${GERRIT_TOPIC} ]]; then
    export TOPIC=${GERRIT_TOPIC}
fi

case ${TOPIC} in
    "FORMAT8_FEAT_DAL_MAP_VERSION"* )
        MAP_FORMAT=F8
        MAP_VERSION=`grep -oP '(?<=^map_version=).*' ${WORKSPACE}/map-config/map_format8.config`
        ;;
    "FORMAT8_HLS_ROUTING_MAP_VERSION"* )
        MAP_FORMAT=BRF
        MAP_VERSION=`grep -oP '(?<=^map_version=).*' ${WORKSPACE}/map-config/map_format8_brf.config`
        ;;
    * )
        echo "TOPIC=${TOPIC} is not supported"
        exit 1
        ;;
esac
wget -nc --tries=3 --timeout=120 https://hls.cci.in.here.com/job/hls_routing/job/sv/job/build/job/psv-linux-x86-gcc7.2-release/lastSuccessfulBuild/s3/download/build/routing-hls.tar.gz
tar xf routing-hls.tar.gz

LIBS=${WORKSPACE}/libs
mkdir -p ${LIBS}

docker run \
    --env=MITF_PATH=/workspace \
    --env=PYTHONPATH=/workspace/map-integration-testing:/workspace/map-integration-testing/ci/routing  \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=VIRTUAL_TIMEOUT=2m \
    --interactive \
    --name=$BUILD_TAG \
    --net=host \
    --rm \
    --user=bldadmin \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    ${DOCKER_IMAGE} bash -esux << "EOS"
    python3 map-integration-testing/ci/routing/acceptance/download_libs.py --map_config /workspace/map-config/map_format8.config --path_to_libs /workspace/libs
    python3 map-integration-testing/ci/routing/acceptance/preprocess_libs.py -p /workspace/libs -o /workspace/test_libs
    map-integration-testing/ci/routing/acceptance/update_acc_tests.sh python3 map-integration-testing/ci/routing/acceptance/preprocess_libs.py -p /workspace/libs -o /workspace/test_libs
    python3 map-integration-testing/ci/routing/generate_robot_coverage.py --config map-integration-testing/config/acceptance_config_example.cfg --path_to_robot_libs /workspace/share/here/routing/spec/lib/ --template map-integration-testing/utils/web/templates/xml_coverage.j2 --output /workspace/geocoverage_report.html
EOS

ls -lahR ${LIBS}
echo "Updating tests using downloaded dumps"

HLS_DOCKER_IMAGE=$HLS_IMAGE
docker pull ${HLS_DOCKER_IMAGE}
trap "{ [ -z $BUILD_TAG ] || docker ps -aq --filter name=$BUILD_TAG | xargs --no-run-if-empty docker rm -f --volumes || true; } &> /dev/null" EXIT

docker run \
    --cap-add=SYS_ADMIN \
    --shm-size 16g \
    --memory 15G \
    --cpus 2 \
    --env=MAP_PATH_PREFIX=$MAP_PATH_PREFIX \
    --env=LDM_REGION_DVN=$LDM_REGION_DVN \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=MITF_PATH=/workspace/ \
    --env=VIRTUAL_TIMEOUT=4m \
    --interactive \
    --name=$BUILD_TAG \
    --net=none \
    --device=/dev/fuse \
    --rm \
    --user=bldadmin \
    --volume=$MAP_PATH_PREFIX:$MAP_PATH_PREFIX:ro \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    $HLS_DOCKER_IMAGE \
    map-integration-testing/ci/routing/acceptance/run_acc_tests.sh

ls ${WORKSPACE}
docker run \
    --env=MITF_PATH=/workspace \
    --env=PYTHONPATH=/workspace/map-integration-testing:/workspace/map-integration-testing/ci/routing  \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=VIRTUAL_TIMEOUT=2m \
    --interactive \
    --name=$BUILD_TAG \
    --net=host \
    --rm \
    --user=bldadmin \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    ${DOCKER_IMAGE} bash -esux << "EOS"
    python3 map-integration-testing/ci/routing/acceptance/convert_xunit_report.py -d /workspace/xunit.xml -b /workspace/converted_xunit.xml
EOS

