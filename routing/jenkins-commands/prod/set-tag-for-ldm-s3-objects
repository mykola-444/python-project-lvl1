#!/usr/bin/env bash
set -e

####################################Pre-Run Execution###############################################
source map-integration-testing/ci/routing/common_functions.sh

# Keys in associative array are supported topics
declare -A map_configs=(
    ["FORMAT8_FEAT_DAL_MAP_VERSION"]="map_format8.config"
    ["FORMAT8_HLS_ROUTING_MAP_VERSION"]="map_format8.config"
    ["MAINLINE_NDS_OLYMPIA_MAP_VERSION"]="map_nds.config"
    ["SOP2_NDS_OLYMPIA_MAP_VERSION"]="map_nds.config"
    ["SOP3_NDS_OLYMPIA_MAP_VERSION"]="map_nds.config"
    ["SOP4_NDS_OLYMPIA_MAP_VERSION"]="map_nds.config"
    ["SOP5_NDS_OLYMPIA_MAP_VERSION"]="map_nds.config"
    ["NDS_STANDARD_MAP_VERSION"]="map_nds_standard.config"
    ["NDS_MOTEGI_MAP_VERSION"]="map_nds_vanilla.config"
    ["NDS_BONNEVILLE_MAP_VERSION"]="map_nds_bonneville.config"
    ["NDS_DONINGTON_MAP_VERSION"]="map_nds_donington.config"
    ["NDS_SUPERSET_MAP_VERSION"]="map_nds_superset.config"
    ["NDS_ACDC_MAP_VERSION"]="map_nds_acdc.config"
    ["NDS_SPARTA_EU_MAP_VERSION"]="map/sparta/mapdb/eu.config"
    ["NDS_SPARTA_NA_MAP_VERSION"]="map/sparta/mapdb/na.config"
    ["NDS_SPARTA_RW_MAP_VERSION"]="map/sparta/mapdb/rw.config"
    ["NDS_SOP1_SPARTA_EU_MAP_VERSION"]="map/sparta/mapdb/eu.config"
    ["NDS_SOP1_SPARTA_NA_MAP_VERSION"]="map/sparta/mapdb/na.config"
    ["NDS_SOP1_SPARTA_RW_MAP_VERSION"]="map/sparta/mapdb/rw.config"
)

verify_env_vars() {
    set_env_var_if_not_set BOT_NAME mitf-bot
    set_env_var_if_not_set BOT_EMAIL ${BOT_NAME}\@here.com
}

init_git() {
    cd map-config
    git config user.name ${BOT_NAME}
    git config user.email ${BOT_EMAIL}
    cd -
}

get_reference_id() {
    echo "$1" | grep ref | cut -d":" -f2 | tr -d " \n\t"
}

get_change_url() {
    echo "$1" | grep url | cut -d":" -f2,3 | tr -d " \n\t"
}

get_nds_map_path() {
    local client_map_path=$(awk -F\= '/^folder_client*/{print "s3://" $2}' "$1")
    MAP_PATHS=()
    if [[ ${#client_map_path} -gt 100 ]]; then
        echo "WARN: More than one path found"
        EU_MAP=$(echo "${client_map_path}" | cut -d\/ -f1-6 | awk 'BEGIN{ RS = "" ; FS = "\n" }{ print $1 }')
        MAP_PATHS+=("${EU_MAP}")
        NA_MAP=$(echo "${client_map_path}" | cut -d\/ -f1-6 | awk 'BEGIN{ RS = "" ; FS = "\n" }{ print $2 }')
        MAP_PATHS+=("${NA_MAP}")
        RW_MAP=$(echo "${client_map_path}" | cut -d\/ -f1-6 | awk 'BEGIN{ RS = "" ; FS = "\n" }{ print $3 }')
        MAP_PATHS+=("${RW_MAP}")
    else
        MAP_PATH=$(echo "${client_map_path}" | cut -d\/ -f1-6 | awk 'BEGIN{ RS = "" ; FS = "\n" }{ print $0 }')
        MAP_PATHS+=("${MAP_PATH}")
    fi
}

get_f8_map_path() {
    MAP_PATHS=()
    local s3_bucket=$(awk -F\= '/^map_aws_s3_bucket_url/{print $2}' "$1")
    local client_map_path=$(awk -F\= '/^map_path/{print $2}' "$1")
    MAP_PATHS+=("${s3_bucket}/${client_map_path}")
}

process_map_config() {
    local REVIEW=$(ssh gerrit.it.here.com -p 29418 -l ${BOT_NAME} \
                                          gerrit query --current-patch-set \
                                                       --files \
                                                       -- \
                                                           intopic:${TOPIC} \
                                                           project:mos/map-config \
                                                           status:open owner:mosman-bot limit:1)

    local REFERENCE_ID=$(get_reference_id "${REVIEW}")
    local CHANGE_URL=$(get_change_url "${REVIEW}")
    local PATCH_SET=`echo ${REFERENCE_ID} | cut -d"/" -f5`

    if [[ -n ${REFERENCE_ID} ]] || [[ -n ${CHANGE_URL} ]]; then
        echo "INFO: Reference ID ["${REFERENCE_ID}"]"
        echo "INFO: Gerrit change url ["${CHANGE_URL}"]"
        echo "INFO: Current patch set number ["${PATCH_SET}"]"
        init_git;
        local MAP_CONFIG_PATH=${map_configs[${TOPIC}]}
        if [[ -z "${MAP_CONFIG_PATH}" ]]; then
            echo "WARN: Cannot find path to map config file for TOPIC="${TOPIC}""
        else
            cd map-config
            git fetch origin ${REFERENCE_ID} && git checkout FETCH_HEAD
            case ${TOPIC} in
                "FORMAT8"*"MAP_VERSION"* )
                    get_f8_map_path "${MAP_CONFIG_PATH}"
                    ;;
                    * )
                    get_nds_map_path "${MAP_CONFIG_PATH}"
                    ;;
            esac
        fi
        cd -
    else
        echo "INFO: No changes for TOPIC=${TOPIC} found"
    fi
}
####################################on Docker execution#############################################
docker_execution() {
source_docker_cfg map-integration-testing/ci/routing/docker.cfg

exit_if_no_env_var JENKINS_IMAGE

docker pull ${JENKINS_IMAGE}

trap "{ [[ -z \"${BUILD_TAG}\" ]] ||
        docker ps -aq --filter name=${BUILD_TAG} |
        xargs --no-run-if-empty docker rm -f --volumes ||
        true;
        } &> /dev/null" EXIT

docker run \
    --env=AWS_DEFAULT_REGION=us-east-1 \
    --volume=${WORKSPACE}:/workspace \
    --workdir=/workspace \
    --name=${BUILD_TAG} \
    --user=bldadmin \
    --interactive \
    --rm \
    ${JENKINS_IMAGE} \
    python3 map-integration-testing/ci/routing/set_s3_tag.py --ldm-list "${LDM_LIST}" \
                                                             --map-path "${MAP_PATH}"
 }
####################################on Jenkins execution############################################
jenkins_aux_commands() {
    python3 -m pip install --upgrade --user pip &&
    python3 -m pip install --user boto3==1.9.81
}

jenkins_execution() {
    /usr/bin/python3 map-integration-testing/ci/routing/set_s3_tag.py --ldm-list "${LDM_LIST}" \
                                                                      --map-path "${MAP_PATH}"
}
#######################################Run Execution################################################
exit_if_no_env_var RUN_ON_ENV

if [[ ${RUN_ON_ENV} == "Docker" ]]; then
    execute="docker_execution"
elif [[ ${RUN_ON_ENV} == "Jenkins" ]]; then
    jenkins_aux_commands;
    execute="jenkins_execution"
else
    echo "ERROR: Unsupported environment [${RUN_ON_ENV}]"
    exit 1
fi

verify_env_vars

echo "INFO: Start running on [${RUN_ON_ENV}] instance"

if [[ -z "${TOPIC}" ]] && [[ -z "${MAP_PATH}" ]] && [[ -z "${LDM_LIST}" ]]; then
    echo "INFO: Trying to get LDM list using predefined Gerrit Topic set"
    for TOPIC in "${!map_configs[@]}"; do
        echo "INFO: Processing TOPIC=${TOPIC}"
        process_map_config "${TOPIC}"
        for MAP_PATH in "${MAP_PATHS[@]}"
        do
            echo "INFO: Found path to the map [${MAP_PATH}]"
            ${execute} "${MAP_PATH}"
        done
    done
elif [[ -n "${MAP_PATH}" ]] && [[ -z "${TOPIC}" ]] && [[ -z "${LDM_LIST}" ]]; then
    echo "Trying to get LDM list directly from map package: ${MAP_PATH}"
    exit_if_no_env_var MAP_PATH
     ${execute} ${MAP_PATH}
elif [[ -n "${TOPIC}" ]] && [[ -z "${MAP_PATH}" ]] && [[ -z "${LDM_LIST}" ]]; then
    echo "INFO: Trying to get LDM list using Gerrit Topic"
    process_map_config ${TOPIC}
    for MAP_PATH in "${MAP_PATHS[@]}"
        do
            echo "INFO: Found path to the map [${map_path}]"
            ${execute} "${MAP_PATH}"
        done
elif [[ -n "${LDM_LIST}" ]] && [[ -z "${TOPIC}" ]] && [[ -z "${MAP_PATH}" ]]; then
    echo "INFO: Specific LDM list is set"
    ${execute} ${LDM_LIST}
else
    echo "ERROR: Undefined project configuration"
    exit 1
fi
