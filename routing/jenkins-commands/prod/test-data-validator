set -xe
. map-integration-testing/ci/routing/common_functions.sh
source_docker_cfg map-integration-testing/ci/routing/docker_acc.cfg
DOCKER_IMAGE=$MITF_IMAGE

function verify_env_vars {
    set_env_var_if_not_set AWS_DEFAULT_REGION us-east-1
    set_env_var_if_not_set BUCKET mitf-artifacts
}
verify_env_vars

if [[ -z ${TOPIC} ]] && [[ ! -z ${GERRIT_TOPIC} ]]; then
    export TOPIC=${GERRIT_TOPIC}
fi

case ${TOPIC} in
    "FORMAT8_FEAT_DAL_MAP_VERSION"* )
        MAP_FORMAT=F8
        MAP_VERSION=`grep -oP '(?<=^map_version=).*' ${WORKSPACE}/map-config/map_format8.config`
        ;;
    "FORMAT8_HLS_ROUTING_MAP_VERSION"* )
        MAP_FORMAT=BRF
        MAP_VERSION=`grep -oP '(?<=^map_version=).*' ${WORKSPACE}/map-config/map_format8_brf.config`
        ;;
    * )
        echo "TOPIC=${TOPIC} is not supported"
        exit 1
        ;;
esac
# TODO (asmirnov): Move this functionality to "download_build.sh" since it's duplicated in many places
# download build artifact from mos.cci
#if [[ ${MAP_FORMAT} == "F8" ]]; then
#    wget -N --tries=3 --timeout=120 https://mos.cci.in.here.com/job/$CLIENT_BUILD_JOB/$CLIENT_BUILD_NUMBER/s3/download/build/test_routing_component.tgz
#    tar xf test_routing_component.tgz
# TODO (asmirnov): Temporary using sparta build as hls cci returns 502
#elif [[ ${MAP_FORMAT} == "BRF" ]]; then
#    wget -N --tries=3 --timeout=120 https://hls.cci.in.here.com/job/hls_routing/job/sv/job/build/job/$SERVER_BUILD_JOB/$SERVER_BUILD_NUMBER/s3/download/build/routing-hls.tar.gz
#    tar xf routing-hls.tar.gz
#elif [[ ${MAP_FORMAT} == "NDS_SPARTA" ]]; then
#elif [[ ${MAP_FORMAT} == "NDS_SPARTA" ]] || [[ ${MAP_FORMAT} == "BRF" ]]; then
#    wget -N --tries=3 --timeout=120 https://psv-corenav.cci.in.here.com/job/sparta/job/psv/job/build/job/$CLIENT_BUILD_JOB/$CLIENT_BUILD_NUMBER/s3/download/build/routing-tests.tar.gz
#    tar xf routing-tests.tar.gz
#else
#    echo "ERROR: Undetermined/unsupported MAP_FORMAT=${MAP_FORMAT}"
#    exit 1
#fi

wget -nc --tries=3 --timeout=120 https://hls.cci.in.here.com/job/hls_routing/job/sv/job/build/job/psv-linux-x86-gcc7.2-release/lastSuccessfulBuild/s3/download/build/routing-hls.tar.gz
tar xf routing-hls.tar.gz

# Exists - should be dockerized
docker pull $DOCKER_IMAGE
trap "{ [ -z $BUILD_TAG ] || docker ps -aq --filter name=$BUILD_TAG | xargs --no-run-if-empty docker rm -f --volumes || true; } &> /dev/null" EXIT
docker run \
    --env=MITF_PATH=/workspace \
    --env=PYTHONPATH=/workspace/map-integration-testing  \
    --env=FAILED_KEYWORDS="${FAILED_KEYWORDS}" \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=VIRTUAL_TIMEOUT=2m \
    --interactive \
    --name=$BUILD_TAG \
    --net=host \
    --rm \
    --user=bldadmin \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace/map-integration-testing \
    $DOCKER_IMAGE \
    /bin/bash -c "python3 ci/routing/acceptance/failed_mitf_tests.py -r /workspace/xunit.xml \
    -s /workspace/share/here/routing/spec/international/ > /workspace/failed_mitf_tests.txt"

tail -n +3 ${WORKSPACE}/failed_mitf_tests.txt > ${WORKSPACE}/failed_mitf_tests_.txt
FAILED_KEYWORDS=""
while read kwd
do
  if [[ -z $FAILED_KEYWORDS ]]; then
      FAILED_KEYWORDS="$kwd"
   else
      FAILED_KEYWORDS="$FAILED_KEYWORDS;$kwd"
   fi
done < ${WORKSPACE}/failed_mitf_tests_.txt

# TODO (asmirnov): Since failed_mitf_tests.py returns test names instead of keywords names - TEMPORARY hardconding:
if [[ -z $FAKE_FAILED_KEYWORDS ]]; then
    FAILED_KEYWORDS="Provided route plan uses a toll road;Provided route plan has a positive toll road travelled in positive direction;Provided route plan has a positive toll road travelled in negative direction"
else
    FAILED_KEYWORDS=$FAKE_FAILED_KEYWORDS
fi

LIBS=${WORKSPACE}/libs
mkdir -p ${LIBS}

docker run \
    --env=MITF_PATH=/workspace \
    --env=PYTHONPATH=/workspace/map-integration-testing:/workspace/map-integration-testing/ci/routing  \
    --env=FAILED_KEYWORDS="${FAILED_KEYWORDS}" \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=VIRTUAL_TIMEOUT=2m \
    --interactive \
    --name=$BUILD_TAG \
    --net=host \
    --rm \
    --user=bldadmin \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace/map-integration-testing \
    $DOCKER_IMAGE \
    python3 ci/routing/acceptance/download_libs.py --map_config /workspace/map-config/map_format8.config --path_to_libs /workspace/libs

ls -lahR ${LIBS}
echo "Updating tests using downloaded dumps"

trap "{ [ -z $BUILD_TAG ] || docker ps -aq --filter name=$BUILD_TAG | xargs --no-run-if-empty docker rm -f --volumes || true; } &> /dev/null" EXIT
docker run \
    --env=MITF_PATH=/workspace \
    --env=PYTHONPATH=/workspace/map-integration-testing  \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=VIRTUAL_TIMEOUT=2m \
    --interactive \
    --name=$BUILD_TAG \
    --net=host \
    --rm \
    --user=bldadmin \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace/map-integration-testing \
    $DOCKER_IMAGE \
    python3 ci/routing/acceptance/preprocess_libs.py -p /workspace/libs -o /workspace/test_libs -k "${FAILED_KEYWORDS}"

ls -lahR ${WORKSPACE}/test_libs

trap "{ [ -z $BUILD_TAG ] || docker ps -aq --filter name=$BUILD_TAG | xargs --no-run-if-empty docker rm -f --volumes || true; } &> /dev/null" EXIT
docker run \
    --env=MITF_PATH=/workspace \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=VIRTUAL_TIMEOUT=2m \
    --interactive \
    --name=$BUILD_TAG \
    --net=host \
    --rm \
    --user=bldadmin \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    $DOCKER_IMAGE \
    map-integration-testing/ci/routing/acceptance/update_acc_tests.sh

# TODO (asmirnov): Get map version from map config
aws s3 cp ${WORKSPACE}/robot_specs.tgz s3://${BUCKET}/mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/
aws s3api put-object-acl \
            --bucket ${BUCKET} \
            --key mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/robot_specs.tgz \
            --grant-full-control 'emailaddress="I_EXT_AWS_CCI_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_MAPDATA_RD@here.com",emailaddress="I_EXT_AWS_CONTDELIV_P@here.com"'

HLS_DOCKER_IMAGE=$HLS_IMAGE
docker pull ${HLS_DOCKER_IMAGE}
trap "{ [ -z $BUILD_TAG ] || docker ps -aq --filter name=$BUILD_TAG | xargs --no-run-if-empty docker rm -f --volumes || true; } &> /dev/null" EXIT

docker run \
    --cap-add=SYS_ADMIN \
    --shm-size 16g \
    --memory 15G \
    --cpus 2 \
    --env=MAP_PATH_PREFIX=$MAP_PATH_PREFIX \
    --env=LDM_REGION_DVN=$LDM_REGION_DVN \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=MITF_PATH=/workspace/ \
    --env=VIRTUAL_TIMEOUT=4m \
    --interactive \
    --name=$BUILD_TAG \
    --net=none \
    --device=/dev/fuse \
    --rm \
    --user=bldadmin \
    --volume=$MAP_PATH_PREFIX:$MAP_PATH_PREFIX:ro \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    $HLS_DOCKER_IMAGE \
    map-integration-testing/ci/routing/acceptance/run_acc_tests.sh

ls ${WORKSPACE}
aws s3 cp ${WORKSPACE}/xunit.xml s3://${BUCKET}/mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/
aws s3api put-object-acl \
            --bucket ${BUCKET} \
            --key mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/xunit.xml \
            --grant-full-control 'emailaddress="I_EXT_AWS_CCI_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_MAPDATA_RD@here.com",emailaddress="I_EXT_AWS_CONTDELIV_P@here.com"'
