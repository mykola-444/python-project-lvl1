set -xe

. map-integration-testing/ci/routing/common_functions.sh

exit_if_no_env_var OLP_KEY_ID
exit_if_no_env_var OLP_SECRET
exit_if_no_env_var TML_AUTHORIZATION
exit_if_no_env_var REF_CLIENT_KEY
exit_if_no_env_var MAPFAN_APP_ID
exit_if_no_env_var TRANSPORT_MODE
exit_if_no_env_var USE_LIVE_TRAFFIC

. map-integration-testing/ci/routing/docker_acc.cfg

echo "Map downloaded in previous stage:"
ls -lahR ${MAP_PATH_PREFIX}

git clone https://github.com/vishnubob/wait-for-it.git

# Dirty hack for HSP test - we need to download artifact from special branch
if [[ ${DATETIME} == "20201012_100000" ]]; then
  curl -L --output artifacts.zip --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "https://main.gitlab.in.here.com/api/v4/projects/routing%2Fgemini/jobs/3904724/artifacts/"
else
  curl -L --output artifacts.zip --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "https://main.gitlab.in.here.com/api/v4/projects/routing%2Fgemini/jobs/artifacts/master/download?job=gemini"
fi

unzip artifacts.zip
# Replace bundled map-config with the specified one to be able to run against experimental maps like in case with HSP:
rm -rf ${WORKSPACE}/build/map_config/
cp -r ${WORKSPACE}/map-config/ ${WORKSPACE}/build/map_config/

source ${WORKSPACE}/build/map_config/map/ols/routing/hmc_plus_japan.config
BRF=${MAP_PATH_PREFIX}/${folder_routing_server_brf}/
MITF_PATH=/workspace/map-integration-testing/

if [[ ${USE_LIVE_TRAFFIC} == "true" ]]; then
cat <<'EOT'>log4cplus.cfg
log4cplus.appender.stdout=log4cplus::ConsoleAppender
log4cplus.appender.stdout.Target=System.out
log4cplus.appender.stdout.Threshold=INFO
log4cplus.appender.stdout.layout=log4cplus::PatternLayout
log4cplus.appender.stdout.layout.ConversionPattern=%D{%H:%M:%S.%q} %-5p %m%n

log4cplus.appender.logfile = log4cplus::FileAppender
log4cplus.appender.logfile.File = /workspace/trafficdb.log
log4cplus.appender.logfile.Append = true
log4cplus.appender.logfile.ImmediateFlush = true

log4cplus.logger.trafficdb=ERROR, stdout, logfile
log4cplus.logger.trafficdb_stats=INFO, stdout, logfile
EOT

cat <<'EOT'>docker-entrypoint.sh
#!/bin/bash
python3 map-integration-testing/ci/routing/acceptance/update_trafficdb_cfg.py
export LD_LIBRARY_PATH=$(pwd)/build/lib64/here
build/bin/trafficdb --cfg /workspace/trafficdb.cfg -p --log /workspace/log4cplus.cfg
build/bin/gemini --brf ${BRF} --l10n build/share/here/routing/l10n --developer \
    --enable-traffic --traffic_packages_path build/share/here/traffic --listen=0.0.0.0:8080
EOT
else
cat <<'EOT'>docker-entrypoint.sh
#!/bin/bash
export LD_LIBRARY_PATH=$(pwd)/build/lib64/here
build/bin/gemini --brf ${BRF} --l10n build/share/here/routing/l10n --developer --listen=0.0.0.0:8080
EOT
fi

chmod +x docker-entrypoint.sh

# TODO (asmirnov): Add job option like OLS_ENDPOINT to be able to use prod vs local
DOCKER_IMAGE=$GEMINI_IMAGE
docker pull ${DOCKER_IMAGE}
docker run \
    --cap-add=SYS_ADMIN \
    --shm-size 15g \
    --memory 16G \
    --cpus 2 \
    -itd \
    --env=BRF=$BRF \
    --env=OLP_KEY_ID=$OLP_KEY_ID \
    --env=OLP_SECRET=$OLP_SECRET \
    --env=TML_AUTHORIZATION=$TML_AUTHORIZATION \
    --env=MITF_PATH=$MITF_PATH \
    --env=VIRTUAL_TIMEOUT=4m \
    --name=${BUILD_TAG}_ols \
    --device=/dev/fuse --rm \
    --user=bldadmin \
    --volume=$MAP_PATH_PREFIX:$MAP_PATH_PREFIX:ro \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    --entrypoint /workspace/docker-entrypoint.sh \
    $DOCKER_IMAGE

mkdir ${WORKSPACE}/tests
tar xf validity_sheet.tar.gz -C ${WORKSPACE}/tests

if [[ ${NPA} == "true" ]]; then
  NPA="--npa"
else
  NPA=""
fi

DOCKER_IMAGE=$MITF_IMAGE
docker pull $DOCKER_IMAGE
trap "{ [ -z $BUILD_TAG ] || docker ps -aq --filter name=${BUILD_TAG}_mitf | xargs --no-run-if-empty docker rm -f --volumes || true; } &> /dev/null" EXIT
docker run \
    --cap-add=SYS_ADMIN \
    --env=VIRTUAL_TIMEOUT=4m \
    --interactive \
    --name=${BUILD_TAG}_mitf \
    --device=/dev/fuse --rm \
    --link=${BUILD_TAG}_ols \
    --user=bldadmin \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    --env=PYTHONPATH=/workspace/map-integration-testing \
    --env=MAPFAN_APP_ID=${MAPFAN_APP_ID} \
    --env=REF_CLIENT_KEY=${REF_CLIENT_KEY} \
    --env=DATETIME=${DATETIME} \
    --env=NPA=${NPA} \
    --env=TRANSPORT_MODE=${TRANSPORT_MODE} \
    --env=OLS_HOST=${BUILD_TAG}_ols \
    $DOCKER_IMAGE bash -esux << "EOS"
    sudo pip3 install requests --upgrade
    bash -c "wait-for-it/wait-for-it.sh --timeout=120 ${OLS_HOST}:8080"
    cat /workspace/trafficdb.log
    if ! grep -q "TrafficPublished" /workspace/trafficdb.log; then exit 1; fi
    cd /workspace/map-integration-testing
    python3 utils/japan/run.py --input_file /workspace/tests/TheValiditySheetWithTransition.csv ${NPA} \
      --output_folder /tmp/japan --app_id="${MAPFAN_APP_ID}" --key_id="${REF_CLIENT_KEY}" --departure ${DATETIME} \
      --ols_url=http://${OLS_HOST}:8080/v8/routes --transport_mode=${TRANSPORT_MODE}
    python3 utils/japan/run.py --input_file /workspace/tests/TheValiditySheetNoTransition.csv ${NPA} \
      --output_folder /tmp/japan1 --app_id="${MAPFAN_APP_ID}" --key_id="${REF_CLIENT_KEY}" --departure ${DATETIME} \
      --ols_url=http://${OLS_HOST}:8080/v8/routes --transport_mode=${TRANSPORT_MODE}
    cp /tmp/japan1/here/pages/*.html /tmp/japan/here/pages/
    cat /tmp/japan1/here/pages/list.txt >> /tmp/japan/here/pages/list.txt
    cp /tmp/japan1/mapfan/no* /tmp/japan/mapfan/
    cp /tmp/japan1/here/no* /tmp/japan/here/
    cp -r /tmp/japan/ /workspace/tests
    python3 utils/japan/get_mapfan_images.py \
      --data_folder /workspace/tests/japan/mapfan --app_id="${MAPFAN_APP_ID}"
EOS

docker stop ${BUILD_TAG}_ols

if [[ ${USE_LIVE_TRAFFIC} == "true" ]]; then
  cp ${WORKSPACE}/trafficdb.log ${WORKSPACE}/tests
fi
cd ${WORKSPACE}/tests
tar -czf ${WORKSPACE}/tests.tgz *

if [[ ! -z ${NPA} ]]; then
  aws s3 cp ${WORKSPACE}/tests.tgz s3://mitf-artifacts/mitf/npa/"$(date +"%d-%m-%Y")"/"$(date +%s%3N)"_results.tgz
fi
