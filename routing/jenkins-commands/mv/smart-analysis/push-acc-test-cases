#!/usr/bin/env bash
set -xe

# Check mandatory variables
source map-integration-testing/ci/routing/common_functions.sh
set_env_var_if_not_set TOPIC ${GERRIT_TOPIC}
set_env_var_if_not_set AWS_DEFAULT_REGION "us-east-1"
set_env_var_if_not_set MITF_ARTIFACTS_BUCKET "mitf-artifacts"
set_env_var_if_not_set TESTS_GERRIT_BRANCH "master"
set_env_var_if_not_set TESTS_GERRIT_PROJECT "mos/routing/main"
set_env_var_if_not_set BOT_NAME "rmp-bot"
set_env_var_if_not_set BOT_EMAIL "${BOT_NAME}@here.com"
set_env_var_if_not_set ACC_TESTS_PATH "main/tools/test/share/spec"
set_env_var_if_not_set PYTHONPATH "/workspace/map-integration-testing"
set_env_var_if_not_set ARTIFACT_DIR "output/artifacts"
set_env_var_if_not_set INPUT_DIR "input/${MAP_FORMAT}/test_routing_component"

case ${TOPIC} in
    "FORMAT8_HLS_ROUTING_MAP_VERSION"* )
        MAP_CFG='map_format8_brf.config'
        MAP_FORMAT="BRF"
        source ${WORKSPACE}/map-config/${MAP_CFG} && MAP_VERSION=${map_version}; BRF_VERSION=${brf_compiler_version}
        ACC_ARTIFACTS_DIR=${MAP_FORMAT}_${MAP_VERSION}_${BRF_VERSION}
        ;;
    * )
        echo "ERROR: TOPIC=${TOPIC} is not supported"
        exit 1
        ;;
esac

get_build_job_url() {
    test_job_url=${1%/*}; test_job_build_number=${1##*/}
    regex='Copied ([[:digit:]]) artifact from "(\w+) » (\w+) » (\w+) » (.*)" build number ([[:digit:]]+).*artifacts=\((.*gz)\)'
    for line in "$(curl $1/consoleText/${JENKINS_JSON_API_SUFFIX})"; do
        if [[ "${line}" =~ ${regex} ]]; then
            amount_artifacts="${BASH_REMATCH[1]}"; program_name="${BASH_REMATCH[2]}"
            stage="${BASH_REMATCH[3]}"; job_type="${BASH_REMATCH[4]}"
            build_job_name="${BASH_REMATCH[5]}"; build_job_number="${BASH_REMATCH[6]}"
            artifact_path="${BASH_REMATCH[7]}"
        fi
    done
    echo "INFO: Jenkins test job ($1) used [${amount_artifacts}] artifact from [${job_type}] type [${build_job_name}] job with build number [${build_job_number}] on path [${artifact_path}]"
    base_test_url=${test_job_url%%/team-*}; base_build_url=${base_test_url//test/$job_type}
    build_job_url="${base_build_url}/${build_job_name}"
    echo "INFO: Build job url: ${build_job_url} with build number: [${build_job_number}] will be used for further processing"
}

get_test_routing_component() {
    job_url=${1}; job_build=${2}; output_path=${3}; artifact_path=${4}
    echo "INFO: Trying to get test routing component from [${job_build}] build of ${job_url} Jenkins build job"
    wget -nc -v --tries=3 --timeout=120 -P "${output_path}/${job_build}" \
                                           "${job_url}"/"${job_build}"/s3/download/${artifact_path}
}
# Check if specific change exists
# INPUT: gerrit_project=$1; gerrit_branch=$2; gerrit_topic=$3; user_name=$4; message_prefix=$5; change_status=$6
# OUTPUT: changes_count; change_url; change_number; change_revision; commit_message; change_ref
git_init main ${BOT_NAME} ${BOT_EMAIL}

check_if_change_exists ${TESTS_GERRIT_PROJECT} ${TESTS_GERRIT_BRANCH} ${TOPIC} ${BOT_NAME} \
                       "MITF-generated acceptance tests for" "open"
if [[ -n ${change_ref} ]]; then
    cd main
    git fetch ssh://${BOT_NAME}@gerrit.it.here.com:29418/${TESTS_GERRIT_PROJECT} ${change_ref} &&
    git checkout FETCH_HEAD
    cd -
    CREATE_PATCHSET=true
else
    check_if_change_exists ${TESTS_GERRIT_PROJECT} ${TESTS_GERRIT_BRANCH} ${TOPIC} ${BOT_NAME} \
                               "Automatic Hashes Update for Map Release" "open"
    if [[ -n ${change_ref} ]]; then
        cd main
        git fetch ssh://${BOT_NAME}@gerrit.it.here.com:29418/${TESTS_GERRIT_PROJECT} ${change_ref} &&
        git checkout FETCH_HEAD
        cd -
    else
        check_if_change_exists ${TESTS_GERRIT_PROJECT} ${TESTS_GERRIT_BRANCH} ${TOPIC} ${BOT_NAME} "" "open"
        if [[ -n ${change_ref} ]]; then
            cd main
            git fetch ssh://${BOT_NAME}@gerrit.it.here.com:29418/${TESTS_GERRIT_PROJECT} ${change_ref} &&
            git checkout FETCH_HEAD
            cd -
        fi
    fi
    CREATE_PATCHSET=false
fi

if [[ "${GERRIT_EVENT_COMMENT}" =~ "smart analysis init" ]]; then
    tar -xvf ${WORKSPACE}/robot_specs.tgz -C ${ACC_TESTS_PATH} &&
    ./map-integration-testing/ci/routing/push_robot_files.sh
else
    # Unpack parent job artifacts
    tar -xvf results.tgz && given_builds=$(ls ${ARTIFACT_DIR}/*_builds.txt)
    while IFS= read -r given_job
    do
        echo "INFO: Getting parent build job information of ${given_job}"
        given_job_url=${given_job%/*}; given_job_build_number=${given_job##*/}; project=${given_job##*/}
        get_build_job_url ${given_job}  &&
        get_test_routing_component ${build_job_url} ${build_job_number} ${INPUT_DIR} ${artifact_path}
        test ! -d test_routing_component && mkdir test_routing_component
        tar xf ${output_path}/${build_job_number}/${artifact_path##*/} --directory test_routing_component
        # Docker preparation and execution
        source_docker_cfg map-integration-testing/ci/routing/docker_acc.cfg
        docker pull ${MITF_IMAGE} && exception_docker "${BUILD_TAG}"
        docker run --env ACC_TESTS_PATH="${ACC_TESTS_PATH}" \
                   --env=REPORT="${ARTIFACT_DIR}/${given_job_build_number}/xunit.xml" \
                   --env PYTHONPATH="${PYTHONPATH}" \
                   --env AWS_DEFAULT_REGION \
                   --name "${BUILD_TAG}" \
                   --interactive \
                   --rm \
                   --user "bldadmin" \
                   --volume "${WORKSPACE}:/workspace" \
                   --workdir "/workspace" \
                   ${MITF_IMAGE} bash -esux << "EOS"
                    python3 map-integration-testing/ci/routing/acceptance/report_analyzer.py -r ${REPORT} \
                                                                                             -s test_routing_component/share/here/routing/spec/international \
                                                                                             -o ${ACC_TESTS_PATH}/international \
                                                                                             -f updated_libs
                    python3 map-integration-testing/ci/routing/acceptance/acceptance_tests_updater_prod.py --libs updated_libs \
                                                                                                           --sources ${ACC_TESTS_PATH}/international
EOS
    done < ${given_builds}
    ./map-integration-testing/ci/routing/push_robot_files.sh
fi