#!groovy
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils

// build description
currentBuild.description = "<p>TOPIC: ${GERRIT_TOPIC}</p><p>URL: <a href='https://gerrit.it.here.com/${GERRIT_CHANGE_NUMBER}'>${GERRIT_CHANGE_NUMBER},${GERRIT_PATCHSET_NUMBER}</p><p>TRIGGERED BY: ${GERRIT_EVENT_ACCOUNT_NAME}</p>"
PIPELINE_BUILD_URL = currentBuild.absoluteUrl


try {
stage('Start Analysis') {
    build job: "gerrit-feedback",
    parameters: [
        string(name: "RESULT", value: "0"),
        string(name: "BUILD_COMPLETED", value: "0"),
        string(name: "GERRIT_TOPIC", value: "${GERRIT_TOPIC}"),
        string(name: "GERRIT_PROJECT", value: "${GERRIT_PROJECT}"),
        string(name: "GERRIT_REFSPEC", value: "${GERRIT_REFSPEC}"),
        string(name: "MITF_GERRIT_REFSPEC", value: "${MITF_GERRIT_REFSPEC}"),
        string(name: "GERRIT_CHANGE_NUMBER", value: "${GERRIT_CHANGE_NUMBER}"),
        string(name: "GERRIT_PATCHSET_NUMBER", value: "${GERRIT_PATCHSET_NUMBER}"),
        string(name: "MESSAGE", value: "Smart Analysis STARTED: ${PIPELINE_BUILD_URL}"),
        string(name: "DESCRIPTION", value: "Started for: <a href='https://gerrit.it.here.com/${GERRIT_CHANGE_NUMBER}'>${GERRIT_CHANGE_NUMBER},${GERRIT_PATCHSET_NUMBER}")
    ]
}

stage ("Get Test Results") {
    def get_test_results = build job: "get-acc-test-results",
    parameters: [
        string(name: "MAP_FORMAT", value: "${MAP_FORMAT}"),
        string(name: "MITF_GERRIT_REFSPEC", value: "${MITF_GERRIT_REFSPEC}"),
        string(name: "GERRIT_CHANGE_NUMBER", value: "${GERRIT_CHANGE_NUMBER}"),
        string(name: "GERRIT_EVENT_COMMENT_TEXT", value: "${env.GERRIT_EVENT_COMMENT_TEXT}"),
        string(name: "MAP_CONFIG_GERRIT_REFSPEC", value: "${GERRIT_REFSPEC}")
    ]
    env.get_test_results_build_number = get_test_results.getNumber()
}

stage ("Prepare Initial Commit") {
    if (env.GERRIT_EVENT_COMMENT_TEXT =~ 'smart analysis init') {
        echo "Initial commit will be prepared and pushed, \nbased on test results from [${env.get_test_results_build_number}] build number"
        def get_test_data = build job: "acc-test-data-preparation",
        parameters: [
            string(name: "MAP_FORMAT", value: "${MAP_FORMAT}"),
            string(name: "MITF_GERRIT_REFSPEC", value: "${MITF_GERRIT_REFSPEC}"),
            string(name: "MAP_CONFIG_GERRIT_REFSPEC", value: "${GERRIT_REFSPEC}"),
            string(name: "GET_TEST_RESULTS_BUILD_NUMBER", value: "${env.get_test_results_build_number}")
        ]
        env.get_test_data_build_number = get_test_data.getNumber()
    } else {
        echo 'New patchset will be pushed. Skipping stage...'
        Utils.markStageSkippedForConditional("Prepare Initial Commit")
    }
}

stage ("Push Changes") {
    build job: "push-acc-test-cases",
    parameters: [
        string(name: "BOT_NAME", value: "rmp-bot"),
        string(name: "MAP_FORMAT", value: "${MAP_FORMAT}"),
        string(name: "TESTS_GERRIT_BRANCH", value: "master"),
        string(name: "GERRIT_TOPIC", value: "${GERRIT_TOPIC}"),
        string(name: "GERRIT_REFSPEC", value: "${GERRIT_REFSPEC}"),
        string(name: "MITF_GERRIT_REFSPEC", value: "${MITF_GERRIT_REFSPEC}"),
        string(name: "GERRIT_EVENT_COMMENT", value: env.GERRIT_EVENT_COMMENT_TEXT),
        string(name: "GET_TEST_DATA_BUILD_NUMBER", value: "${env.get_test_data_build_number}"),
        string(name: "GET_TEST_RESULTS_BUILD_NUMBER", value: "${env.get_test_results_build_number}")
    ]
}

stage('Finish Analysis') {
    build job: "gerrit-feedback",
    parameters: [
        string(name: "RESULT", value: "1"),
        string(name: "BUILD_COMPLETED", value: "1"),
        string(name: "GERRIT_CHANGE_NUMBER", value: "${GERRIT_CHANGE_NUMBER}"),
        string(name: "GERRIT_PATCHSET_NUMBER", value: "${GERRIT_PATCHSET_NUMBER}"),
        string(name: "MESSAGE", value: "Smart Analysis FINISHED: ${PIPELINE_BUILD_URL}"),
        string(name: "DESCRIPTION", value: "Finished for: <a href='https://gerrit.it.here.com/${GERRIT_CHANGE_NUMBER}'>${GERRIT_CHANGE_NUMBER},${GERRIT_PATCHSET_NUMBER}")
    ]
}

} catch ( e ) {
    // use try-catch to simulate post build action on failure
    stage('Finish Analysis') {
        build job: "gerrit-feedback",
        parameters: [
            string(name: "RESULT", value: "1"),
            string(name: "BUILD_COMPLETED", value: "-1"),
            string(name: "GERRIT_CHANGE_NUMBER", value: "${GERRIT_CHANGE_NUMBER}"),
            string(name: "GERRIT_PATCHSET_NUMBER", value: "${GERRIT_PATCHSET_NUMBER}"),
            string(name: "MESSAGE", value: "Smart Analysis FAILED: ${PIPELINE_BUILD_URL}"),
            string(name: "DESCRIPTION", value: "Finished for: <a href='https://gerrit.it.here.com/${GERRIT_CHANGE_NUMBER}'>${GERRIT_CHANGE_NUMBER},${GERRIT_PATCHSET_NUMBER}")
        ]
    }
    String recipient = "${GERRIT_EVENT_ACCOUNT_EMAIL}"
    mail subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something wrong with Job ${env.JOB_NAME} - Build # ${env.BUILD_NUMBER}.\nCheck console output at ${env.BUILD_URL}console to view the results and verify the build in appropriate stage.",
             to: recipient,
            // cc: "I_EXT_ROUTING_MAP_VALIDATION_REPORT@here.com",
             replyTo: recipient,
            from: "no-reply@here.com"
    // propagate exception to mark pipeline as failed
    throw new Exception(e)
}
