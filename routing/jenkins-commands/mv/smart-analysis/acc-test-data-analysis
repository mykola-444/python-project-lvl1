#!/usr/bin/env bash
#set -xe

# Check mandatory variables
source map-integration-testing/ci/routing/common_functions.sh
exit_if_no_env_var MAP_FORMAT
set_env_var_if_not_set OUTPUT_DIR "./output/${MAP_FORMAT}/test_routing_components"

if [[ ${MAP_FORMAT} == "F8" ]]; then
    MAP_CONFIG="map_format8.config"
    # Read Map Config file
    source ${WORKSPACE}/map-config/${MAP_CONFIG}
    MAP_VERSION=${map_version}
    MAP_BUCKET=${map_aws_s3_bucket_url}
    MAP_OBJECT_KEY=${file_world_cdt}
    MAP_PATH=${map_path}
elif [[ ${MAP_FORMAT} == "BRF" ]]; then
    # Read BRF Config file
    BRF_CONFIG="map_format8_brf.config"
    source ${WORKSPACE}/map-config/${BRF_CONFIG}
    MAP_VERSION=${map_version}
    BRF_VERSION=${brf_compiler_version}
    MAP_BUCKET=${map_aws_s3_bucket_url}
    MAP_OBJECT_KEY=${folder_routing_server_brf}
else
    echo "ERROR: Unsupported MAP_FORMAT: ${MAP_FORMAT}"
    exit 1
fi

get_build_job_url() {
    test_job_url=${1%/*}; test_job_build=${1##*/}
    regex='Copied ([[:digit:]]) artifact from "(\w+) » (\w+) » (\w+) » (.*)" build number ([[:digit:]]+).*artifacts=\((.*gz)\)'
    for line in "$(curl $1/consoleText/${JENKINS_JSON_API_SUFFIX})"; do
        if [[ "${line}" =~ ${regex} ]]; then
            amount_artifacts="${BASH_REMATCH[1]}"; program_name="${BASH_REMATCH[2]}"
            stage="${BASH_REMATCH[3]}"; job_type="${BASH_REMATCH[4]}"
            job_name="${BASH_REMATCH[5]}"; build_number="${BASH_REMATCH[6]}"
            artifact_path="${BASH_REMATCH[7]}"
        fi
    done
    echo "INFO: Jenkins test job ($1) used [${amount_artifacts}] artifact from [${job_type}] type [${job_name}] job with build number [${build_number}] on path [${artifact_path}]"
    base_test_url=${test_job_url%%/team-*}; base_build_url=${base_test_url//test/$job_type}
    build_job_url="${base_build_url}/${job_name}"
    echo "INFO: Build job url: ${build_job_url} with build number: [${build_number}] will be used for further processing"
}

get_test_routing_component() {
    job_url=${1}; job_build=${2}; output_path=${3}; artifact_path=${4}
    echo "INFO: Trying to get test routing component from [${job_build}] build of ${job_url} Jenkins build job"
    wget -nc -v --tries=3 --timeout=120 -P "${output_path}/${job_build}" \
                                            "${job_url}"/"${job_build}"/s3/download/${artifact_path}
}

for failed_job in ${FAILED_JOBS[@]}; do
    echo "INFO: Getting parent build job information of ${failed_job}"
    get_build_job_url ${failed_job}  &&
    get_test_routing_component ${build_job_url} ${build_number} ${OUTPUT_DIR} ${artifact_path}
done

test ! -d test_routing_component && mkdir test_routing_component
tar xf ${output_path}/${job_build}/${artifact_path##*/} --directory test_routing_component

# Docker preparation and execution
source_docker_cfg map-integration-testing/ci/routing/docker_acc.cfg
docker pull ${MITF_IMAGE} && exception_docker "${BUILD_TAG}"
docker run --env=PYTHONPATH=/workspace/map-integration-testing  \
           --env=MAP_FORMAT=${MAP_FORMAT} \
           --interactive \
           --name=${BUILD_TAG} \
           --rm \
           --user=bldadmin \
           --volume=${WORKSPACE}:/workspace \
           --workdir=/workspace \
           ${MITF_IMAGE} /bin/bash -c "python3 map-integration-testing/ci/routing/acceptance/failed_mitf_tests.py -r output/BRF/reports/29329/xunit.xml -s test_routing_component/share/here/routing/spec/international"

tail -n +3 ${WORKSPACE}/failed_mitf_tests.txt > ${WORKSPACE}/failed_mitf_tests_.txt
FAILED_KEYWORDS=""
while read kwd
    do
      if [[ -z ${FAILED_KEYWORDS} ]]; then
          FAILED_KEYWORDS="$kwd"
       else
          FAILED_KEYWORDS="$FAILED_KEYWORDS;$kwd"
       fi
    done < ${WORKSPACE}/failed_mitf_tests_.txt

# TODO (asmirnov): Since failed_mitf_tests.py returns test names instead of keywords names - TEMPORARY hardconding:
if [[ -z ${FAKE_FAILED_KEYWORDS} ]]; then
    FAILED_KEYWORDS="Provided route plan uses a toll road;Provided route plan has a positive toll road travelled in positive direction;Provided route plan has a positive toll road travelled in negative direction"
else
    FAILED_KEYWORDS=${FAKE_FAILED_KEYWORDS}
fi

LIBS=${WORKSPACE}/libs
mkdir -p ${LIBS}

docker run --env=MITF_PATH=/workspace \
           --env=PYTHONPATH=/workspace/map-integration-testing:/workspace/map-integration-testing/ci/routing  \
           --env=FAILED_KEYWORDS="${FAILED_KEYWORDS}" \
           --env=MAP_FORMAT=${MAP_FORMAT} \
           --env=VIRTUAL_TIMEOUT=2m \
           --interactive \
           --name=${BUILD_TAG} \
           --net=host \
           --rm \
           --user=bldadmin \
           --volume=${WORKSPACE}:/workspace \
           --workdir=/workspace/map-integration-testing \
           ${MITF_IMAGE} "python3 ci/routing/acceptance/download_libs.py --map_config /workspace/map-config/map_format8.config \
                                                                         --path_to_libs /workspace/libs"

ls -lahR ${LIBS}
echo "Updating tests using downloaded dumps"

docker run --env=MITF_PATH=/workspace \
           --env=PYTHONPATH=/workspace/map-integration-testing  \
           --env=MAP_FORMAT=${MAP_FORMAT} \
           --env=VIRTUAL_TIMEOUT=2m \
           --interactive \
           --name=${BUILD_TAG} \
           --net=host \
           --rm \
           --user=bldadmin \
           --volume=${WORKSPACE}:/workspace \
           --workdir=/workspace/map-integration-testing \
           ${MITF_IMAGE} "python3 ci/routing/acceptance/preprocess_libs.py -p /workspace/libs \
                                                                           -o /workspace/test_libs \
                                                                           -k ${FAILED_KEYWORDS}"

ls -lahR ${WORKSPACE}/test_libs

docker run --env=MITF_PATH=/workspace \
           --env=MAP_FORMAT=${MAP_FORMAT} \
           --env=VIRTUAL_TIMEOUT=2m \
           --interactive \
           --name=${BUILD_TAG} \
           --net=host \
           --rm \
           --user=bldadmin \
           --volume=${WORKSPACE}:/workspace \
           --workdir=/workspace \
           ${MITF_IMAGE} map-integration-testing/ci/routing/acceptance/update_acc_tests.sh

# TODO (asmirnov): Get map version from map config
aws s3 cp ${WORKSPACE}/robot_specs.tgz s3://${BUCKET}/mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/
aws s3api put-object-acl \
            --bucket ${BUCKET} \
            --key mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/robot_specs.tgz \
            --grant-full-control 'emailaddress="I_EXT_AWS_CCI_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_MAPDATA_RD@here.com",emailaddress="I_EXT_AWS_CONTDELIV_P@here.com"'

HLS_DOCKER_IMAGE=$HLS_IMAGE
docker pull ${HLS_DOCKER_IMAGE}
trap "{ [ -z $BUILD_TAG ] || docker ps -aq --filter name=$BUILD_TAG | xargs --no-run-if-empty docker rm -f --volumes || true; } &> /dev/null" EXIT

docker run \
    --cap-add=SYS_ADMIN \
    --shm-size 16g \
    --memory 15G \
    --cpus 2 \
    --env=MAP_PATH_PREFIX=$MAP_PATH_PREFIX \
    --env=LDM_REGION_DVN=$LDM_REGION_DVN \
    --env=MAP_FORMAT=$MAP_FORMAT \
    --env=MITF_PATH=/workspace/ \
    --env=VIRTUAL_TIMEOUT=4m \
    --interactive \
    --name=$BUILD_TAG \
    --net=none \
    --device=/dev/fuse \
    --rm \
    --user=bldadmin \
    --volume=$MAP_PATH_PREFIX:$MAP_PATH_PREFIX:ro \
    --volume=$WORKSPACE:/workspace \
    --workdir=/workspace \
    $HLS_DOCKER_IMAGE \
    map-integration-testing/ci/routing/acceptance/run_acc_tests.sh

ls ${WORKSPACE}
aws s3 cp ${WORKSPACE}/xunit.xml s3://${BUCKET}/mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/
aws s3api put-object-acl \
            --bucket ${BUCKET} \
            --key mitf/acc/${MAP_FORMAT}_${MAP_VERSION}/xunit.xml \
            --grant-full-control 'emailaddress="I_EXT_AWS_CCI_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_RD@here.com",emailaddress="I_EXT_AWS_ROUTING_MAPDATA_RD@here.com",emailaddress="I_EXT_AWS_CONTDELIV_P@here.com"'
