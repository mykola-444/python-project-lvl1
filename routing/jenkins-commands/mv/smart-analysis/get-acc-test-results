#!/usr/bin/env bash
set -e

# Check mandatory variables
source map-integration-testing/ci/routing/common_functions.sh
exit_if_no_env_var MAP_FORMAT
exit_if_no_env_var GERRIT_CHANGE_NUMBER
set_env_var_if_not_set OUTPUT_DIR "output/artifacts"
set_env_var_if_not_set BOT_NAME mitf-bot
set_env_var_if_not_set BOT_EMAIL ${BOT_NAME}\@here.com
set_env_var_if_not_set CI_BOT_NAME "hls-bot"
set_env_var_if_not_set ARTIFACT_PATH "outputs/xunit/xunit.xml"

parse_specific_jenkins_build_results() {
    gerrit_messages=$1; shift; job_list=($@); IFS=$'\n'
    declare -a FAILED_BUILDS UNSTABLE_BUILDS ABORTED_BUILDS SUCCEED_BUILDS
    for job in "${job_list[@]}"; do
        for line in $(echo "${gerrit_messages}"); do
            if [[ "${line}" =~ ${job} ]]; then
                build_link="${line%/*}"; job_status="${line##*: }"
                echo "WARN: Job build: ${build_link} has [${job_status}] status"
                if [[ "${job_status}" == "FAILED" ]]; then
                    FAILED_BUILDS+=("${build_link}")
                elif [[ "${job_status}" == "UNSTABLE" ]]; then
                    UNSTABLE_BUILDS+=("${build_link}")
                elif [[ "${job_status}" == "ABORTED" ]]; then
                    ABORTED_BUILDS+=("${build_link}")
                elif [[ "${job_status}" == "SUCCESS" ]]; then
                    SUCCEED_BUILDS+=("${build_link}")
                fi
            else
                continue
            fi
        done
    done
    # Parse results
    if [[ ${#FAILED_BUILDS[@]} -gt 0 ]]; then
        echo "INFO: [${#FAILED_BUILDS[@]}] failed test job(s) detected"
        for failed_build in ${FAILED_BUILDS[@]}; do
            get_job_artifact ${failed_build} ${OUTPUT_DIR} ${ARTIFACT_PATH}
        done
        echo ${FAILED_BUILDS[@]} | tr " " "\n" > ${OUTPUT_DIR}/failed_builds.txt
        tar czvf results.tgz ${OUTPUT_DIR}/failed_builds.txt ${OUTPUT_DIR}/**/*
    elif [[ ${#UNSTABLE_BUILDS[@]} -gt 0 ]]; then
        echo "INFO: [${#UNSTABLE_BUILDS[@]}] unstable test job(s) detected"
        for unstable_build in ${UNSTABLE_BUILDS[@]}; do
            get_job_artifact ${unstable_build} ${OUTPUT_DIR} ${ARTIFACT_PATH}
        done
        echo ${UNSTABLE_BUILDS[@]} | tr " " "\n" > ${OUTPUT_DIR}/unstable_builds.txt
        tar czvf results.tgz ${OUTPUT_DIR}/unstable_builds.txt ${OUTPUT_DIR}/**/*
    elif [[ ${#ABORTED_BUILDS[@]} -gt 0 ]]; then
        echo "ERROR: [${#ABORTED_BUILDS[@]}] aborted test job(s) detected"
        echo ${ABORTED_BUILDS[@]} | tr " " "\n" > ${OUTPUT_DIR}/aborted_builds.txt
    elif [[ ${#SUCCEED_BUILDS[@]} -gt 0 ]]; then
        echo "INFO: [${#SUCCEED_BUILDS[@]}] succeed test job(s) detected"
        for succeed_build in ${SUCCEED_BUILDS[@]}; do
            echo ${succeed_build} ${OUTPUT_DIR} ${ARTIFACT_PATH}
            get_job_artifact ${succeed_build} ${OUTPUT_DIR} ${ARTIFACT_PATH}
        done
        echo ${SUCCEED_BUILDS[@]} | tr " " "\n" > ${OUTPUT_DIR}/succeed_builds.txt
        tar czvf results.tgz ${OUTPUT_DIR}/succeed_builds.txt ${OUTPUT_DIR}/**/*
    else
        echo "WARN: There are not any related to ${CI_BOT_NAME} test jobs detected. Exiting ..."
    fi
}

# Define list of test acceptance jobs
if [[ "${GERRIT_EVENT_COMMENT_TEXT}" =~ "smart analysis init" ]]; then
    JOB_LIST=("psv-test-acceptance-hlp-xml-notraffic-brf-linux-x86-gcc7.2"
              "psv-test-acceptance-hlp-json-trafficdb-brf-linux-x86-gcc7.2"
              "psv-test-acceptance-hlp-json-notraffic-brf-linux-x86-gcc7.2"
              "psv-test-acceptance-lib-notraffic-brf-linux-x86-gcc7.2"
              "psv-test-acceptance-hlp-xml-trafficdb-brf-linux-x86-gcc7.2")

elif [[ "${GERRIT_EVENT_COMMENT_TEXT}" =~ "smart analysis run" ]]; then
    read_map_config_file "${MAP_FORMAT}"
    aws s3 cp s3://${MITF_ARTIFACTS_BUCKET}/mitf/acc/test_results/${MAP_FORMAT}_${MAP_VERSION}_${BRF_VERSION}/jenkins_projects.txt \
              /tmp/jenkins_projects.txt || exit 1
    JOB_LIST=($(cat /tmp/jenkins_projects.txt))
else
    echo "ERROR: Gerrit comment [${GERRIT_EVENT_COMMENT_TEXT}] is not supported"; exit 1
fi

# Get Gerrit change details of the given change number
change_details="$(get_change_details ${BOT_NAME} ${GERRIT_CHANGE_NUMBER})"

# Get change verification status and further processing
get_change_verification_status "${change_details}" "${CI_BOT_NAME}"
if [[ ${VERIFICATION_TYPE} == "WaitForVerification" ]]; then
    echo "ERROR: Waiting for verification by [${CI_BOT_NAME}]. Exiting ..."; exit 0
elif [[ ${VERIFICATION_TYPE} == "Verified" ]]; then
    if [[ ${VERIFICATION_STATUS} == -1 ]]; then
        echo "INFO: Unverified by [${CI_BOT_NAME}] on" \
        "[$(date +'%Y-%m-%d %H:%M:%S' -d "@${GRANTED_ON}") | ${GRANTED_ON}]"
        gerrit_messages="$(get_related_gerrit_messages "${change_details}" ${GRANTED_ON} ${CI_BOT_NAME})"
        parse_specific_jenkins_build_results "${gerrit_messages}" "${JOB_LIST[@]}"
    elif [[ ${VERIFICATION_STATUS} == 1 ]]; then
        if [[ "${GERRIT_EVENT_COMMENT_TEXT}" =~ *"smart analysis run"* ]]; then
            echo "INFO: Verified by [${CI_BOT_NAME}] on " \
                 "[$(date +'%Y-%m-%d %H:%M:%S' -d "@${GRANTED_ON}") | ${GRANTED_ON}]"
            gerrit_messages="$(get_related_gerrit_messages "${change_details}" ${GRANTED_ON} ${CI_BOT_NAME})"
            parse_specific_jenkins_build_results "${gerrit_messages}" "${JOB_LIST[@]}"
        else
            echo "INFO: Verified by [${CI_BOT_NAME}]. Exiting ..."; exit 0
        fi
    else
        echo "ERROR: Undefined verification status: ${VERIFICATION_STATUS}. Exiting ..."; exit 1
    fi
else
    echo "ERROR: Cannot retrieve verification status of [${CI_BOT_NAME}]"; exit 1
fi
