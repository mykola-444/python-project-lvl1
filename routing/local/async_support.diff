diff --git a/nagini/core/olp/api.py b/nagini/core/olp/api.py
index 9742c5c..25faa76 100644
--- a/nagini/core/olp/api.py
+++ b/nagini/core/olp/api.py
@@ -61,6 +61,17 @@ class Api:
         self.config = config
         self.proxies = proxies
 
+    async def fetch(self, url, session):
+        result = None
+        for i in range(5):
+            try:
+                async with session.get(url, headers=self.headers) as response:
+                    result = await response.read()
+                    break
+            except Exception:
+                print("API trying: ", i)
+        return result
+
     @property
     def headers(self) -> dict:
         """
@@ -631,10 +642,14 @@ class Api:
             if part_info.get("title", "") == "Bad Request":
                 raise ValueError(str(part_info))
                 # append the partition to the list
-            all_part_info["partitions"] += part_info["partitions"]
+            # all_part_info["partitions"] += part_info["partitions"]
+            try:
+                all_part_info["partitions"] += part_info["partitions"]
+            except Exception:
+                pass
 
         if len(all_part_info["partitions"]) < len(partition_ids):
-            rest_partition_ids = partition_ids[len(all_part_info["partitions"]) :]
+            rest_partition_ids = partition_ids[len(all_part_info["partitions"]):]
             params2: dict = dict()
             if layer_type == "volatile":
                 params2 = dict(partition=rest_partition_ids)
diff --git a/nagini/core/olp/layer.py b/nagini/core/olp/layer.py
index 0b81371..834eaa3 100644
--- a/nagini/core/olp/layer.py
+++ b/nagini/core/olp/layer.py
@@ -29,6 +29,8 @@ from nagini.core.olp.partition import Partition
 from nagini.core.olp.protobuf_parser import ProtobufParser
 from nagini.core.olp.schema import Schema
 from nagini.core.olp.schema_registry import SchemaRegistry
+import asyncio
+from aiohttp import ClientSession, ClientTimeout
 
 logger = logging.getLogger(__name__)
 
@@ -83,8 +85,38 @@ class Layer:
         :yield: Partition data as raw bytes.
         """
         partitions = self.get_partitions(partition_ids, version)
-        for p in partitions:
-            yield p.get_blob()
+        # for p in partitions:
+        #    yield p.get_blob()
+        loop = asyncio.get_event_loop()
+        future = asyncio.ensure_future(self.run(partitions))
+        data = loop.run_until_complete(future)
+        for i, responces in enumerate(data):
+            for response in responces:
+                if response:
+                    yield bytes(response)
+
+    async def run(self, partitions):
+        tasks = list()
+        results = list()
+        timeout = ClientTimeout(total=100)
+        async with ClientSession(timeout=timeout) as session:
+            for p in partitions:
+                layer_id = p.layer.id
+                data_handle = p.data_handle
+                lookup_apis = p.layer.catalog.apis
+                path = f"/layers/{layer_id}/data/{data_handle}"
+                url = "{}{}".format(lookup_apis["blob"]["baseURL"], path)
+                for i in range(10):
+                    try:
+                        task = asyncio.ensure_future(p.api.fetch(url, session))
+                        tasks.append(task)
+                        break
+                    except Exception:
+                        print("Try again: ", i)
+
+            responses = await asyncio.gather(*tasks)
+            results.append(responses)
+        return results
 
     def read_schema(self) -> Any:
         """
diff --git a/nagini/core/olp/protobuf_parser.py b/nagini/core/olp/protobuf_parser.py
index a325068..b236a74 100644
--- a/nagini/core/olp/protobuf_parser.py
+++ b/nagini/core/olp/protobuf_parser.py
@@ -102,7 +102,12 @@ class ProtobufParser:
         :param message: message received with blob
         :return: parsed protobuf
         """
-        parsed_partition = self.partition_class.FromString(message)
+        parsed_partition = None
+        try:
+            parsed_partition = self.partition_class.FromString(message)
+        except Exception as err:
+            print(err)
+            print(message)
 
         try:
             if parsed_partition.segment_anchor:
